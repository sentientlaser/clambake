#! /bin/bash


####### HOUSKEEPING
# set -x  ### For debugging
IFS=$'\n'  ### required for line by lin text processing

function MESG {
    >&2 echo ": $1"
}


function DEBG {
  for L in $(echo "$1"); do
    >&2 echo " -- $L"
  done
}

function GENERATE_MOUNTPOINT_LIST {
    local MOUNT_LIST=$(mount | grep -E '^/dev/(sd[^a][0-9]*|mmc.*) on' | sed -E 's#^(.*) type.*#\1#')
    # >&2 echo "$MOUNT_LIST"
    echo "$MOUNT_LIST"
}


function GENERATE_JOBS_LIST_ENTRY {
    local VOLUME_DEVICE=$(echo "$1" | cut -d' ' -f1)
    local VOLUME_FOLDER=$(echo "$1" | cut -d' ' -f3-)
    local VOLUME_NAME_CLEANED=$(echo $VOLUME_FOLDER | sed -E 's#.*/([^/]+)#\1#' | sed -E 's#[^a-zA-Z0-9]+#_#g')
    local JOB="$VOLUME_DEVICE $VOLUME_NAME_CLEANED $VOLUME_FOLDER"
    echo "$JOB"
}

function GENERATE_JOBS_LIST {
    for MOUNTPOINT in $(echo "$MOUNTPOINT_LIST")
    do
      GENERATE_JOBS_LIST_ENTRY "$MOUNTPOINT"
    done
}

function INIT {
  MOUNTPOINT_LIST="$(GENERATE_MOUNTPOINT_LIST)"
  JOBS_LIST="$(GENERATE_JOBS_LIST)"
  OUT_DIR="out"
  mkdir $OUT_DIR 2>/dev/null

  for JOB in $(echo "$JOBS_LIST"); do
    MESG "Initialised job: $JOB"
  done
}

function JOB_GET_DEVICE  {
  echo $JOB | cut -d' ' -f1
}

function JOB_GET_NAME {
  echo $JOB | cut -d' ' -f2
}

function JOB_GET_MOUNTPOINT {
  echo $JOB | cut -d' ' -f 3-
}

function JOB_GET_VOLUME_SCAN_LOG_FILE {
  echo $OUT_DIR/$(JOB_GET_NAME).clam
}

function JOB_GET_VOLUME_FLIST_FILE {
  echo $OUT_DIR/$(JOB_GET_NAME).flist
}

function JOB_GET_VOLUME_FLIST_CORRUPTION_FILE {
  echo $OUT_DIR/$(JOB_GET_NAME).error
}

function JOB_GET_RESULT_FILES {
  ls -1 $OUT_DIR/$(JOB_GET_NAME).* | grep -vE "error$"
}


function COUNT_PROCESSED_FILES {
  cat $(JOB_GET_RESULT_FILES)                   | # Cat the clam and flist file together
                  grep -E '^/'                  | # Filter out the summary on the clam VOLUME_FILE_COUNT
                  sed -E 's#^(.*): .*$#\1#'     | # Filter the clam file line endings
                  sort | uniq -c                | # Count the number of occurences of a file (one for the flist, at least one if the clam file contains the entry)
                  tr -s ' ' | grep -E '^ [^1]'  | # Squish spaces and filter only ones that occur more than once (only in the flist by inference)
                  wc -l                          # Count them
}

function COUNT_TOTAL_FILES {
  cat $(JOB_GET_VOLUME_FLIST_FILE) | wc -l
}

function START_CLAM {
    local VOLUME_SCAN_LOG_FILE=$(JOB_GET_VOLUME_SCAN_LOG_FILE)
    local VOLUME_FLIST_FILE=$(JOB_GET_VOLUME_FLIST_FILE)
    local VOLUME_FLIST_CORRUPTION_FILE=$(JOB_GET_VOLUME_FLIST_CORRUPTION_FILE)
    find $(JOB_GET_MOUNTPOINT) -type f > $VOLUME_FLIST_FILE 2> $VOLUME_FLIST_CORRUPTION_FILE
    (clamscan -r "$(JOB_GET_MOUNTPOINT)" > $VOLUME_SCAN_LOG_FILE; sfill -l "$(JOB_GET_MOUNTPOINT)"; CREATE_JOB_QUARANTINE "$JOB") &
    MESG "started scan $(JOB_GET_DEVICE) at $(JOB_GET_MOUNTPOINT) with $(COUNT_TOTAL_FILES) files"
}

function START_ALL_CLAMS {
    for JOB in $(echo "$JOBS_LIST"); do
      START_CLAM
    done
}

function CLAMS_UP {
  local CLAMS_IN_FLIGHT="$(pgrep clamscan | wc -l)"
  local SFILLS_IN_FLIGHT="$(pgrep sfill | wc -l)"
  echo $((CLAMS_IN_FLIGHT + SFILLS_IN_FLIGHT))
}

function CHECK_CLAM_PROGRESS {
  SCANNING="$(pgrep -a clamscan | grep "$(JOB_GET_MOUNTPOINT)" | wc -l)"
  SCRUBBING="$(pgrep -a sfill | grep "$(JOB_GET_MOUNTPOINT)" | wc -l)"
  if [ "$SCANNING" -gt 0 ]; then
    local PERCENT_COMPLETE=$(bc <<< "scale=6; $(COUNT_PROCESSED_FILES)/$(COUNT_TOTAL_FILES)*100" | sed -E 's#0+$#0#g')
    MESG "$(JOB_GET_DEVICE) $(JOB_GET_NAME) -> scan $PERCENT_COMPLETE%                                        "
  elif [ "$SCRUBBING" -gt 0 ]; then
    MESG "$(JOB_GET_DEVICE) $(JOB_GET_NAME) -> scrubbing                                                  "
  else
    MESG "$(JOB_GET_DEVICE) $(JOB_GET_NAME) -> quarantining/done                                                     "
  fi
}

function WAIT_WITH_PROGRESS_ON_CLAMS {
  echo
  until [ "$(CLAMS_UP)" -le "0" ]; do
    JOB_COUNT="$(( $(echo "$JOBS_LIST" | wc -l) + 1 ))"
    for JOB in $(echo "$JOBS_LIST"); do
      CHECK_CLAM_PROGRESS
    done
    sleep 2s  # Sleep statements may be ugly, but it's better than kludging a callback system into bash
    echo -en "\e[${JOB_COUNT}A";
    echo -e "\e[0K\r"
  done
}




function CREATE_JOB_QUARANTINE {
  local OLD_JOB="$JOB"
  JOB="$1"
  echo "$JOB"
  echo $(JOB_GET_VOLUME_SCAN_LOG_FILE)
    local QUARANTINE_FILE="$OUT_DIR/QUARANTINE_$(JOB_GET_NAME).tar"
    local INFECTED_FILES="$(cat $(JOB_GET_VOLUME_SCAN_LOG_FILE) | grep -E "FOUND$" | sed -E 's#^(.*): .*$#\1#' | sort | uniq)"
    local INFECTED_FILES_COUNT="$(( $(echo "$INFECTED_FILES" | wc -l) - 1 ))"

    tar -cf $QUARANTINE_FILE $(JOB_GET_VOLUME_SCAN_LOG_FILE)
    for INFECTED_FILE in $(echo "$INFECTED_FILES")
    do
      tar -rf $QUARANTINE_FILE $INFECTED_FILE
      rm $INFECTED_FILE
    done
    gzip -f $QUARANTINE_FILE
    cp -f "$QUARANTINE_FILE.gz" "$(JOB_GET_MOUNTPOINT)"

    MESG "Quarantined $INFECTED_FILES_COUNT files from $(JOB_GET_MOUNTPOINT)"
    JOB="$OLD_JOB"
}
#
# function BUILD_QUARANTINES {
#   for JOB in $JOBS_LIST; do
#     CREATE_JOB_QUARANTINE
#
# }


function ALERT_DONE {
  ## this sound file is under CC Attribution 3.0, from here http://soundbible.com/1750-Hitting-Metal.html
  cvlc --play-and-exit done.mp3
  MESG "ALL DONE"
}

function PROCESS {

  INIT
  START_ALL_CLAMS
  WAIT_WITH_PROGRESS_ON_CLAMS
  ALERT_DONE
}

time PROCESS
