#! /bin/bash


####### HOUSKEEPING
# pgrep clamscan | xargs kill 2>/dev/null ### For debugging
# set -x  ### For debugging
IFS=$'\n'  ### required for line by lin text processing


function GENERATE_MOUNTPOINT_LIST {
    local MOUNT_LIST=$(mount | grep -E '^/dev/sd[^a][0-9]+ on')
    echo "$MOUNT_LIST" | cut -d' ' -f 3
}


function GENERATE_JOBS_LIST_ENTRY {
    local VOLUME_FOLDER=$1
    local MOUNT_LIST=$(mount | grep -E '^/dev/sd[^a][0-9]+ on')
    local VOLUME_DEVICE=$(echo "$MOUNT_LIST" | grep -e "$VOLUME_FOLDER" | cut -d' ' -f 1)
    local VOLUME_NAME_CLEANED=$(echo $VOLUME_FOLDER | sed -E 's#.*/([^/]+)#\1#' | tr -s ' ' | tr ' ' '_')
    echo $VOLUME_DEVICE $VOLUME_NAME_CLEANED $VOLUME_FOLDER
}

function GENERATE_JOBS_LIST {
    for MOUNTPOINT in $(echo "$MOUNTPOINT_LIST")
    do
      GENERATE_JOBS_LIST_ENTRY $MOUNTPOINT
    done
}

function SETUP_VARIABLES {
  MOUNTPOINT_LIST="$(GENERATE_MOUNTPOINT_LIST)"
  JOBS_LIST="$(GENERATE_JOBS_LIST)"
}

function JOB_GET_DEVICE  {
  echo $1 | cut -d' ' -f1
}


function JOB_GET_NAME {
  echo $1 | cut -d' ' -f2
}


function JOB_GET_MOUNTPOINT {
  echo $1 | cut -d' ' -f 3-
}

SETUP_VARIABLES

for JOB in $(echo "$JOBS_LIST"); do
  echo $(JOB_GET_MOUNTPOINT "$JOB")
  echo $(JOB_GET_DEVICE "$JOB")
  echo $(JOB_GET_NAME "$JOB")
  echo
done





































function BEGIN_CLAMSCAN {
    local VOLUME_SCAN_LOG_FILE=$(echo "$VOLUME_NAME_CLEANED".clam)
    local VOLUME_FLIST_FILE=$(echo "$VOLUME_NAME_CLEANED".flist)
    find $VOLUME_FOLDER -type f > $VOLUME_FLIST_FILE
    clamscan -r "$VOLUME_FOLDER" > $VOLUME_SCAN_LOG_FILE &
}

function SCAN_ALL {
  for VOLUME_FOLDER in $(echo "$VOLUME_FOLDERS")
  do
    BEGIN_CLAMSCAN $VOLUME_FOLDER
  done
}

function CHECK_PROGRESS {
  VOLUME_NAME_CLEANED=$1
  VOLUME_DEVICE=$2

  COUNT_TOTAL_FILES=$(cat $VOLUME_NAME_CLEANED.flist | wc -l)
  COUNT_PROCESSED_FILES=$(cat $VOLUME_NAME_CLEANED.* | grep -E '^/' | sed -E 's#^(.*): .*$#\1#' | sort | uniq -c | tr -s ' ' | grep -E '^ 2' | wc -l)
    # cat VOLUME_NAME_CLEANED.*      # Cat the clam and flist file together
    # grep -E '^/'                   # Filter out the summary on the clam VOLUME_FILE_COUNT
    # sed -E 's#^(.*): .*$#\1#'      # Filter the clam file line endings
    # sort | uniq -c                 # Count the number of occurences of a file (one for the flist, at least one if the clam file contains the entry)
    # tr -s ' ' | grep -E '^ [^1]'   # Squish spaces and filter only ones that occur more than once (only in the flist by inference)
    # wc -l                          # Count them

  PERCENT_COMPLETE=$(bc <<< "scale=4; $COUNT_PROCESSED_FILES/$COUNT_TOTAL_FILES*100")
  echo $VOLUME_DEVICE $VOLUME_NAME_CLEANED $PERCENT_COMPLETE
}

function START_SCANS {
  JOB_LIST=$(SCAN_ALL)
}

function SCAN_UNTIL_COMPLETE {
  echo "-----------------------------------------------------------"
  until [ "$(pgrep clamscan | wc -l)" -le "0" ]
  do
    for JOB in $(echo "$JOB_LIST")
    do
      NAME=$(echo $JOB | cut -d' ' -f2)
      VOLUME_DEVICE=$(echo $JOB | cut -d' ' -f1)
      CHECK_PROGRESS $NAME $VOLUME_DEVICE
    done
    echo
    sleep 10s  # Sleep statements may be ugly, but it's better than kludging a callback system into bash
  done
  echo "-----------------------------------------------------------"
}

function QUARANTINE_FILES {
  echo
  for JOB in $(echo "$JOB_LIST")
  do
    NAME="$(echo $JOB | cut -f2 -d' ')"
    VOLUME_FOLDER="$(echo $JOB | cut -d' ' -f 5-)"
    CLAM_FILE="$NAME.clam"
    QUARANTINE_FILE="QUARANTINE_$NAME.tar"
    tar -cf $QUARANTINE_FILE $CLAM_FILE
    INFECTED_FILES="$(cat $CLAM_FILE | grep -E "FOUND$" | sed -E 's#^(.*): .*$#\1#' | sort | uniq)"
    for INFECTED_FILE in $(echo "$INFECTED_FILES")
    do
      tar -rf $QUARANTINE_FILE $INFECTED_FILE
      # rm $INFECTED_FILE
    done
    gzip $QUARANTINE_FILE
    mv -f "$QUARANTINE_FILE.gz" "$VOLUME_FOLDER"
  done
}

function CLEANUP {
  rm *.clam
  rm *.flist
}
# for JOB in $(echo "$JOB_LIST")
#
# START_SCANS
# SCAN_UNTIL_COMPLETE
# QUARANTINE_FILES
# CLEANUP
